{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ueren\\\\Desktop\\\\Course Material\\\\22-23\\\\CS48001\\\\Project\\\\project demo\\\\hardhat-hackathon-boilerplate\\\\frontend\\\\src\\\\components\\\\Dapp.js\";\nimport React from \"react\"; // We'll use ethers to interact with the Ethereum network and our contract\n\nimport { ethers } from \"ethers\"; // We import the contract's artifacts and address here, as we are going to be\n// using them with ethers\n\nimport TokenArtifact from \"../contracts/Token.json\";\nimport contractAddress from \"../contracts/contract-address.json\"; // All the logic of this dapp is contained in the Dapp component.\n// These other components are just presentational ones: they don't have any\n// logic. They just render HTML.\n\nimport { NoWalletDetected } from \"./NoWalletDetected\";\nimport { ConnectWallet } from \"./ConnectWallet\";\nimport { Loading } from \"./Loading\";\nimport { Transfer } from \"./Transfer\";\nimport { Test } from \"./Test\";\nimport { TransactionErrorMessage } from \"./TransactionErrorMessage\";\nimport { WaitingForTransactionMessage } from \"./WaitingForTransactionMessage\";\nimport { CreateProduct } from \"./CreateProduct\";\nimport { SellProduct } from \"./SellProduct\";\nimport { StartWarranty } from \"./StartWarranty\";\nimport { ExtendWarranty } from \"./ExtendWarranty\";\nimport { CheckWarranty } from \"./CheckWarranty\"; // This is the Hardhat Network id, you might change it in the hardhat.config.js.\n// If you are using MetaMask, be sure to change the Network id to 1337.\n// Here's a list of network ids https://docs.metamask.io/guide/ethereum-provider.html#properties\n// to use when deploying to other networks.\n\nconst HARDHAT_NETWORK_ID = '31337'; // This is an error code that indicates that the user canceled a transaction\n\nconst ERROR_CODE_TX_REJECTED_BY_USER = 4001; // This component is in charge of doing these things:\n//   1. It connects to the user's wallet\n//   2. Initializes ethers and the Token contract\n//   3. Polls the user balance to keep it updated.\n//   4. Transfers tokens by sending transactions\n//   5. Renders the whole application\n//\n// Note that (3) and (4) are specific of this sample application, but they show\n// you how to keep your Dapp and contract's state in sync,  and how to send a\n// transaction.\n\nexport class Dapp extends React.Component {\n  constructor(props) {\n    super(props); // We store multiple things in Dapp's state.\n    // You don't need to follow this pattern, but it's an useful example.\n\n    this.initialState = {\n      // The info of the token (i.e. It's Name and symbol)\n      tokenData: undefined,\n      // The user's address and balance\n      selectedAddress: undefined,\n      balance: undefined,\n      // The ID about transactions being sent, and any possible error with them\n      txBeingSent: undefined,\n      transactionError: undefined,\n      networkError: undefined,\n      test: undefined,\n      productID: undefined,\n      owner: undefined,\n      warrantyStartTime: undefined,\n      totalWarrantyTime: undefined,\n      warrantyState: undefined\n    };\n    this.state = this.initialState;\n  }\n\n  render() {\n    // Ethereum wallets inject the window.ethereum object. If it hasn't been\n    // injected, we instruct the user to install MetaMask.\n    if (window.ethereum === undefined) {\n      return /*#__PURE__*/React.createElement(NoWalletDetected, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 14\n        }\n      });\n    } // The next thing we need to do, is to ask the user to connect their wallet.\n    // When the wallet gets connected, we are going to save the users's address\n    // in the component's state. So, if it hasn't been saved yet, we have\n    // to show the ConnectWallet component.\n    //\n    // Note that we pass it a callback that is going to be called when the user\n    // clicks a button. This callback just calls the _connectWallet method.\n\n\n    if (!this.state.selectedAddress) {\n      return /*#__PURE__*/React.createElement(ConnectWallet, {\n        connectWallet: () => this._connectWallet(),\n        networkError: this.state.networkError,\n        dismiss: () => this._dismissNetworkError(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 9\n        }\n      });\n    } // If the token data or the user's balance hasn't loaded yet, we show\n    // a loading component.\n\n\n    if (!this.state.tokenData || !this.state.balance) {\n      return /*#__PURE__*/React.createElement(Loading, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 14\n        }\n      });\n    } // If everything is loaded, we render the application.\n\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container p-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }\n    }, \"Product Validator\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }\n    }, \"Welcome \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 23\n      }\n    }, this.state.selectedAddress == 0xD0CD01862660fB5167a73B708B3d46388DD501aC ? \"Producer\" : this.state.selectedAddress == 0xAa319cBebD467D18E161D752AF40dF5A2Fe8c733 ? \"Owner\" : \"Warranty Staff\")))), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(CreateProduct, {\n      createProduct: () => {\n        this._createProduct();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 13\n      }\n    }, \"ProductID: \", this.state.productID), /*#__PURE__*/React.createElement(SellProduct, {\n      sellProduct: input => {\n        this._sellProduct(input);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 13\n      }\n    }, this.state.owner), /*#__PURE__*/React.createElement(StartWarranty, {\n      startWarranty: () => {\n        this._startWarranty();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 13\n      }\n    }, this.state.warrantyStartTime), /*#__PURE__*/React.createElement(ExtendWarranty, {\n      extendWarranty: input => {\n        this._extendWarranty(input);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 13\n      }\n    }, this.state.totalWarrantyTime), /*#__PURE__*/React.createElement(CheckWarranty, {\n      checkWarranty: () => {\n        this._checkWarranty();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 13\n      }\n    }, this.state.warrantyState))));\n  }\n\n  componentWillUnmount() {\n    // We poll the user's balance, so we have to stop doing that when Dapp\n    // gets unmounted\n    this._stopPollingData();\n  }\n\n  async _connectWallet() {\n    // This method is run when the user clicks the Connect. It connects the\n    // dapp to the user's wallet, and initializes it.\n    // To connect to the user's wallet, we have to run this method.\n    // It returns a promise that will resolve to the user's address.\n    const [selectedAddress] = await window.ethereum.request({\n      method: 'eth_requestAccounts'\n    }); // Once we have the address, we can initialize the application.\n    // First we check the network\n\n    if (!this._checkNetwork()) {\n      return;\n    }\n\n    this._initialize(selectedAddress); // We reinitialize it whenever the user changes their account.\n\n\n    window.ethereum.on(\"accountsChanged\", _ref => {\n      let [newAddress] = _ref;\n\n      this._stopPollingData(); // `accountsChanged` event can be triggered with an undefined newAddress.\n      // This happens when the user removes the Dapp from the \"Connected\n      // list of sites allowed access to your addresses\" (Metamask > Settings > Connections)\n      // To avoid errors, we reset the dapp state \n\n\n      if (newAddress === undefined) {\n        return this._resetState();\n      }\n\n      this._initialize(newAddress);\n    }); // We reset the dapp state if the network is changed\n\n    window.ethereum.on(\"chainChanged\", _ref2 => {\n      let [networkId] = _ref2;\n\n      this._stopPollingData();\n\n      this._resetState();\n    });\n  }\n\n  _initialize(userAddress) {\n    // This method initializes the dapp\n    // We first store the user's address in the component's state\n    this.setState({\n      selectedAddress: userAddress\n    }); // Then, we initialize ethers, fetch the token's data, and start polling\n    // for the user's balance.\n    // Fetching the token data and the user's balance are specific to this\n    // sample project, but you can reuse the same initialization pattern.\n\n    this._initializeEthers();\n\n    this._getTokenData();\n\n    this._startPollingData();\n  }\n\n  async _initializeEthers() {\n    // We first initialize ethers by creating a provider using window.ethereum\n    this._provider = new ethers.providers.Web3Provider(window.ethereum); // Then, we initialize the contract using that provider and the token's\n    // artifact. You can do this same thing with your contracts.\n\n    this._token = new ethers.Contract(contractAddress.Token, TokenArtifact.abi, this._provider.getSigner(0));\n  } // The next two methods are needed to start and stop polling data. While\n  // the data being polled here is specific to this example, you can use this\n  // pattern to read any data from your contracts.\n  //\n  // Note that if you don't need it to update in near real time, you probably\n  // don't need to poll it. If that's the case, you can just fetch it when you\n  // initialize the app, as we do with the token data.\n\n\n  _startPollingData() {\n    this._pollDataInterval = setInterval(() => {\n      this._updateBalance();\n\n      this._testString();\n\n      this._updateProductID();\n\n      this._updateOwner();\n\n      this._updateWarrantyStartTime();\n\n      this._updateTotalWarrantyTime();\n    }, 1000); // We run it once immediately so we don't have to wait for it\n\n    this._updateBalance();\n\n    this._testString();\n\n    this._updateProductID();\n\n    this._updateOwner();\n\n    this._updateWarrantyStartTime();\n\n    this._updateTotalWarrantyTime();\n  }\n\n  _stopPollingData() {\n    clearInterval(this._pollDataInterval);\n    this._pollDataInterval = undefined;\n  } // The next two methods just read from the contract and store the results\n  // in the component state.\n\n\n  async _getTokenData() {\n    const name = await this._token.name();\n    const symbol = await this._token.symbol();\n    this.setState({\n      tokenData: {\n        name,\n        symbol\n      }\n    });\n  }\n\n  async _updateBalance() {\n    const balance = await this._token.balanceOf(this.state.selectedAddress);\n    this.setState({\n      balance\n    });\n  } // This method sends an ethereum transaction to transfer tokens.\n  // While this action is specific to this application, it illustrates how to\n  // send a transaction.\n\n\n  async _transferTokens(to, amount) {\n    // Sending a transaction is a complex operation:\n    //   - The user can reject it\n    //   - It can fail before reaching the ethereum network (i.e. if the user\n    //     doesn't have ETH for paying for the tx's gas)\n    //   - It has to be mined, so it isn't immediately confirmed.\n    //     Note that some testing networks, like Hardhat Network, do mine\n    //     transactions immediately, but your dapp should be prepared for\n    //     other networks.\n    //   - It can fail once mined.\n    //\n    // This method handles all of those things, so keep reading to learn how to\n    // do it.\n    try {\n      // If a transaction fails, we save that error in the component's state.\n      // We only save one such error, so before sending a second transaction, we\n      // clear it.\n      this._dismissTransactionError(); // We send the transaction, and save its hash in the Dapp's state. This\n      // way we can indicate that we are waiting for it to be mined.\n\n\n      const tx = await this._token.transfer(to, amount);\n      this.setState({\n        txBeingSent: tx.hash\n      }); // We use .wait() to wait for the transaction to be mined. This method\n      // returns the transaction's receipt.\n\n      const receipt = await tx.wait(); // The receipt, contains a status flag, which is 0 to indicate an error.\n\n      if (receipt.status === 0) {\n        // We can't know the exact error that made the transaction fail when it\n        // was mined, so we throw this generic one.\n        throw new Error(\"Transaction failed\");\n      } // If we got here, the transaction was successful, so you may want to\n      // update your state. Here, we update the user's balance.\n\n\n      await this._updateBalance();\n    } catch (error) {\n      // We check the error code to see if this error was produced because the\n      // user rejected a tx. If that's the case, we do nothing.\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n        return;\n      } // Other errors are logged and stored in the Dapp's state. This is used to\n      // show them to the user, and for debugging.\n\n\n      console.error(error);\n      this.setState({\n        transactionError: error\n      });\n    } finally {\n      // If we leave the try/catch, we aren't sending a tx anymore, so we clear\n      // this part of the state.\n      this.setState({\n        txBeingSent: undefined\n      });\n    }\n  } //UPDATER\n\n\n  async _testString() {\n    const text = await this._token.testString();\n    this.setState({\n      test: text\n    });\n  } //Token.sol test func caller\n\n\n  async _test(input) {\n    try {\n      await this._token.test(input);\n    } catch (error) {\n      console.log(\"Test Func Error\");\n    }\n  }\n\n  async _updateProductID() {\n    const ID = await this._token.getProductNumber();\n    this.setState({\n      productID: ID\n    });\n  }\n\n  async _createProduct() {\n    try {\n      await this._token.createProduct();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async _updateOwner() {\n    const newOwner = await this._token.getOwner();\n    this.setState({\n      owner: newOwner\n    });\n  }\n\n  async _sellProduct(input) {\n    try {\n      await this._token.sellProduct(input);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async _updateWarrantyStartTime() {\n    const startTime = await this._token.getWarrantyStartTime();\n    this.setState({\n      warrantyStartTime: startTime\n    });\n  }\n\n  async _startWarranty() {\n    try {\n      await this._token.setWarrantyStartTime();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async _updateTotalWarrantyTime() {\n    const totalTime = await this._token.getWarrantyTimePeriod();\n    this.setState({\n      totalWarrantyTime: totalTime\n    });\n  }\n\n  async _extendWarranty(input) {\n    try {\n      await this._token.enlargeWarranty(input);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async _checkWarranty() {\n    try {\n      const state = await this._token.checkWarrantyApplicable();\n      this.setState({\n        warrantyState: state\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  } // This method just clears part of the state.\n\n\n  _dismissTransactionError() {\n    this.setState({\n      transactionError: undefined\n    });\n  } // This method just clears part of the state.\n\n\n  _dismissNetworkError() {\n    this.setState({\n      networkError: undefined\n    });\n  } // This is an utility method that turns an RPC error into a human readable\n  // message.\n\n\n  _getRpcErrorMessage(error) {\n    if (error.data) {\n      return error.data.message;\n    }\n\n    return error.message;\n  } // This method resets the state\n\n\n  _resetState() {\n    this.setState(this.initialState);\n  } // This method checks if Metamask selected network is Localhost:8545 \n\n\n  _checkNetwork() {\n    if (window.ethereum.networkVersion === HARDHAT_NETWORK_ID) {\n      return true;\n    }\n\n    this.setState({\n      networkError: 'Please connect Metamask to Localhost:8545'\n    });\n    return false;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/ueren/Desktop/Course Material/22-23/CS48001/Project/project demo/hardhat-hackathon-boilerplate/frontend/src/components/Dapp.js"],"names":["React","ethers","TokenArtifact","contractAddress","NoWalletDetected","ConnectWallet","Loading","Transfer","Test","TransactionErrorMessage","WaitingForTransactionMessage","CreateProduct","SellProduct","StartWarranty","ExtendWarranty","CheckWarranty","HARDHAT_NETWORK_ID","ERROR_CODE_TX_REJECTED_BY_USER","Dapp","Component","constructor","props","initialState","tokenData","undefined","selectedAddress","balance","txBeingSent","transactionError","networkError","test","productID","owner","warrantyStartTime","totalWarrantyTime","warrantyState","state","render","window","ethereum","_connectWallet","_dismissNetworkError","_createProduct","input","_sellProduct","_startWarranty","_extendWarranty","_checkWarranty","componentWillUnmount","_stopPollingData","request","method","_checkNetwork","_initialize","on","newAddress","_resetState","networkId","userAddress","setState","_initializeEthers","_getTokenData","_startPollingData","_provider","providers","Web3Provider","_token","Contract","Token","abi","getSigner","_pollDataInterval","setInterval","_updateBalance","_testString","_updateProductID","_updateOwner","_updateWarrantyStartTime","_updateTotalWarrantyTime","clearInterval","name","symbol","balanceOf","_transferTokens","to","amount","_dismissTransactionError","tx","transfer","hash","receipt","wait","status","Error","error","code","console","text","testString","_test","log","ID","getProductNumber","createProduct","newOwner","getOwner","sellProduct","startTime","getWarrantyStartTime","setWarrantyStartTime","totalTime","getWarrantyTimePeriod","enlargeWarranty","checkWarrantyApplicable","_getRpcErrorMessage","data","message","networkVersion"],"mappings":"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","sourcesContent":["import React from \"react\";\r\n\r\n// We'll use ethers to interact with the Ethereum network and our contract\r\nimport { ethers } from \"ethers\";\r\n\r\n// We import the contract's artifacts and address here, as we are going to be\r\n// using them with ethers\r\nimport TokenArtifact from \"../contracts/Token.json\";\r\nimport contractAddress from \"../contracts/contract-address.json\";\r\n\r\n// All the logic of this dapp is contained in the Dapp component.\r\n// These other components are just presentational ones: they don't have any\r\n// logic. They just render HTML.\r\nimport { NoWalletDetected } from \"./NoWalletDetected\";\r\nimport { ConnectWallet } from \"./ConnectWallet\";\r\nimport { Loading } from \"./Loading\";\r\nimport { Transfer } from \"./Transfer\";\r\nimport { Test } from \"./Test\";\r\nimport { TransactionErrorMessage } from \"./TransactionErrorMessage\";\r\nimport { WaitingForTransactionMessage } from \"./WaitingForTransactionMessage\";\r\nimport { CreateProduct } from \"./CreateProduct\";\r\nimport { SellProduct } from \"./SellProduct\";\r\nimport { StartWarranty } from \"./StartWarranty\";\r\nimport { ExtendWarranty } from \"./ExtendWarranty\";\r\nimport { CheckWarranty } from \"./CheckWarranty\";\r\n\r\n// This is the Hardhat Network id, you might change it in the hardhat.config.js.\r\n// If you are using MetaMask, be sure to change the Network id to 1337.\r\n// Here's a list of network ids https://docs.metamask.io/guide/ethereum-provider.html#properties\r\n// to use when deploying to other networks.\r\nconst HARDHAT_NETWORK_ID = '31337';\r\n\r\n// This is an error code that indicates that the user canceled a transaction\r\nconst ERROR_CODE_TX_REJECTED_BY_USER = 4001;\r\n\r\n// This component is in charge of doing these things:\r\n//   1. It connects to the user's wallet\r\n//   2. Initializes ethers and the Token contract\r\n//   3. Polls the user balance to keep it updated.\r\n//   4. Transfers tokens by sending transactions\r\n//   5. Renders the whole application\r\n//\r\n// Note that (3) and (4) are specific of this sample application, but they show\r\n// you how to keep your Dapp and contract's state in sync,  and how to send a\r\n// transaction.\r\nexport class Dapp extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // We store multiple things in Dapp's state.\r\n    // You don't need to follow this pattern, but it's an useful example.\r\n    this.initialState = {\r\n      // The info of the token (i.e. It's Name and symbol)\r\n      tokenData: undefined,\r\n      // The user's address and balance\r\n      selectedAddress: undefined,\r\n      balance: undefined,\r\n      // The ID about transactions being sent, and any possible error with them\r\n      txBeingSent: undefined,\r\n      transactionError: undefined,\r\n      networkError: undefined,\r\n      test: undefined,\r\n      productID: undefined,\r\n      owner: undefined,\r\n      warrantyStartTime: undefined,\r\n      totalWarrantyTime: undefined,\r\n      warrantyState: undefined,\r\n    };\r\n\r\n    this.state = this.initialState;\r\n  }\r\n\r\n  render() {\r\n    // Ethereum wallets inject the window.ethereum object. If it hasn't been\r\n    // injected, we instruct the user to install MetaMask.\r\n    if (window.ethereum === undefined) {\r\n      return <NoWalletDetected />;\r\n    }\r\n\r\n    // The next thing we need to do, is to ask the user to connect their wallet.\r\n    // When the wallet gets connected, we are going to save the users's address\r\n    // in the component's state. So, if it hasn't been saved yet, we have\r\n    // to show the ConnectWallet component.\r\n    //\r\n    // Note that we pass it a callback that is going to be called when the user\r\n    // clicks a button. This callback just calls the _connectWallet method.\r\n    if (!this.state.selectedAddress) {\r\n      return (\r\n        <ConnectWallet \r\n          connectWallet={() => this._connectWallet()} \r\n          networkError={this.state.networkError}\r\n          dismiss={() => this._dismissNetworkError()}\r\n        />\r\n      );\r\n    }\r\n\r\n    // If the token data or the user's balance hasn't loaded yet, we show\r\n    // a loading component.\r\n    if (!this.state.tokenData || !this.state.balance) {\r\n      return <Loading />;\r\n    }\r\n\r\n    // If everything is loaded, we render the application.\r\n    return (\r\n      <div className=\"container p-4\">\r\n        <div className=\"row\">\r\n          <div className=\"col-12\">\r\n            <h1>\r\n              Product Validator\r\n            </h1>\r\n            <p>\r\n              Welcome <b>{this.state.selectedAddress == 0xD0CD01862660fB5167a73B708B3d46388DD501aC ? \"Producer\" : (this.state.selectedAddress == 0xAa319cBebD467D18E161D752AF40dF5A2Fe8c733 ? \"Owner\" : \"Warranty Staff\")}</b>\r\n            </p>\r\n          </div>\r\n        </div>\r\n\r\n        <hr />\r\n\r\n        <div className=\"row\">\r\n          <div className=\"col-12\">       \r\n            <CreateProduct createProduct={() => {\r\n              this._createProduct()\r\n            }}/>\r\n            <p>ProductID: {this.state.productID}</p>\r\n\r\n            <SellProduct sellProduct={(input) => {\r\n              this._sellProduct(input)\r\n            }}/>\r\n            <p>{this.state.owner}</p>\r\n\r\n            <StartWarranty startWarranty={() => {\r\n              this._startWarranty()\r\n            }}/>\r\n            <p>{this.state.warrantyStartTime}</p>\r\n\r\n            <ExtendWarranty extendWarranty={(input) => {\r\n              this._extendWarranty(input)\r\n            }}/>\r\n            <p>{this.state.totalWarrantyTime}</p>\r\n\r\n            <CheckWarranty checkWarranty={() => {\r\n              this._checkWarranty()\r\n            }}/>\r\n            <p>{this.state.warrantyState}</p>\r\n            \r\n\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    // We poll the user's balance, so we have to stop doing that when Dapp\r\n    // gets unmounted\r\n    this._stopPollingData();\r\n  }\r\n\r\n  async _connectWallet() {\r\n    // This method is run when the user clicks the Connect. It connects the\r\n    // dapp to the user's wallet, and initializes it.\r\n\r\n    // To connect to the user's wallet, we have to run this method.\r\n    // It returns a promise that will resolve to the user's address.\r\n    const [selectedAddress] = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n\r\n    // Once we have the address, we can initialize the application.\r\n\r\n    // First we check the network\r\n    if (!this._checkNetwork()) {\r\n      return;\r\n    }\r\n\r\n    this._initialize(selectedAddress);\r\n\r\n    // We reinitialize it whenever the user changes their account.\r\n    window.ethereum.on(\"accountsChanged\", ([newAddress]) => {\r\n      this._stopPollingData();\r\n      // `accountsChanged` event can be triggered with an undefined newAddress.\r\n      // This happens when the user removes the Dapp from the \"Connected\r\n      // list of sites allowed access to your addresses\" (Metamask > Settings > Connections)\r\n      // To avoid errors, we reset the dapp state \r\n      if (newAddress === undefined) {\r\n        return this._resetState();\r\n      }\r\n      \r\n      this._initialize(newAddress);\r\n    });\r\n    \r\n    // We reset the dapp state if the network is changed\r\n    window.ethereum.on(\"chainChanged\", ([networkId]) => {\r\n      this._stopPollingData();\r\n      this._resetState();\r\n    });\r\n  }\r\n\r\n  _initialize(userAddress) {\r\n    // This method initializes the dapp\r\n\r\n    // We first store the user's address in the component's state\r\n    this.setState({\r\n      selectedAddress: userAddress,\r\n    });\r\n\r\n    // Then, we initialize ethers, fetch the token's data, and start polling\r\n    // for the user's balance.\r\n\r\n    // Fetching the token data and the user's balance are specific to this\r\n    // sample project, but you can reuse the same initialization pattern.\r\n    this._initializeEthers();\r\n    this._getTokenData();\r\n    this._startPollingData();\r\n  }\r\n\r\n  async _initializeEthers() {\r\n    // We first initialize ethers by creating a provider using window.ethereum\r\n    this._provider = new ethers.providers.Web3Provider(window.ethereum);\r\n\r\n    // Then, we initialize the contract using that provider and the token's\r\n    // artifact. You can do this same thing with your contracts.\r\n    this._token = new ethers.Contract(\r\n      contractAddress.Token,\r\n      TokenArtifact.abi,\r\n      this._provider.getSigner(0)\r\n    );\r\n  }\r\n\r\n  // The next two methods are needed to start and stop polling data. While\r\n  // the data being polled here is specific to this example, you can use this\r\n  // pattern to read any data from your contracts.\r\n  //\r\n  // Note that if you don't need it to update in near real time, you probably\r\n  // don't need to poll it. If that's the case, you can just fetch it when you\r\n  // initialize the app, as we do with the token data.\r\n  _startPollingData() {\r\n    this._pollDataInterval = setInterval(() => {\r\n      this._updateBalance()\r\n      this._testString()\r\n      this._updateProductID()\r\n      this._updateOwner()\r\n      this._updateWarrantyStartTime()\r\n      this._updateTotalWarrantyTime()\r\n    }, 1000);\r\n\r\n    // We run it once immediately so we don't have to wait for it\r\n    this._updateBalance();\r\n    this._testString();\r\n    this._updateProductID();\r\n    this._updateOwner();\r\n    this._updateWarrantyStartTime();\r\n    this._updateTotalWarrantyTime();\r\n  }\r\n\r\n  _stopPollingData() {\r\n    clearInterval(this._pollDataInterval);\r\n    this._pollDataInterval = undefined;\r\n  }\r\n\r\n  // The next two methods just read from the contract and store the results\r\n  // in the component state.\r\n  async _getTokenData() {\r\n    const name = await this._token.name();\r\n    const symbol = await this._token.symbol();\r\n\r\n    this.setState({ tokenData: { name, symbol } });\r\n  }\r\n\r\n  async _updateBalance() {\r\n    const balance = await this._token.balanceOf(this.state.selectedAddress);\r\n    this.setState({ balance });\r\n  }\r\n\r\n  \r\n\r\n  // This method sends an ethereum transaction to transfer tokens.\r\n  // While this action is specific to this application, it illustrates how to\r\n  // send a transaction.\r\n  async _transferTokens(to, amount) {\r\n    // Sending a transaction is a complex operation:\r\n    //   - The user can reject it\r\n    //   - It can fail before reaching the ethereum network (i.e. if the user\r\n    //     doesn't have ETH for paying for the tx's gas)\r\n    //   - It has to be mined, so it isn't immediately confirmed.\r\n    //     Note that some testing networks, like Hardhat Network, do mine\r\n    //     transactions immediately, but your dapp should be prepared for\r\n    //     other networks.\r\n    //   - It can fail once mined.\r\n    //\r\n    // This method handles all of those things, so keep reading to learn how to\r\n    // do it.\r\n\r\n    try {\r\n      // If a transaction fails, we save that error in the component's state.\r\n      // We only save one such error, so before sending a second transaction, we\r\n      // clear it.\r\n      this._dismissTransactionError();\r\n\r\n      // We send the transaction, and save its hash in the Dapp's state. This\r\n      // way we can indicate that we are waiting for it to be mined.\r\n      const tx = await this._token.transfer(to, amount);\r\n      this.setState({ txBeingSent: tx.hash });\r\n\r\n      // We use .wait() to wait for the transaction to be mined. This method\r\n      // returns the transaction's receipt.\r\n      const receipt = await tx.wait();\r\n\r\n      // The receipt, contains a status flag, which is 0 to indicate an error.\r\n      if (receipt.status === 0) {\r\n        // We can't know the exact error that made the transaction fail when it\r\n        // was mined, so we throw this generic one.\r\n        throw new Error(\"Transaction failed\");\r\n      }\r\n\r\n      // If we got here, the transaction was successful, so you may want to\r\n      // update your state. Here, we update the user's balance.\r\n      await this._updateBalance();\r\n    } catch (error) {\r\n      // We check the error code to see if this error was produced because the\r\n      // user rejected a tx. If that's the case, we do nothing.\r\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\r\n        return;\r\n      }\r\n\r\n      // Other errors are logged and stored in the Dapp's state. This is used to\r\n      // show them to the user, and for debugging.\r\n      console.error(error);\r\n      this.setState({ transactionError: error });\r\n    } finally {\r\n      // If we leave the try/catch, we aren't sending a tx anymore, so we clear\r\n      // this part of the state.\r\n      this.setState({ txBeingSent: undefined });\r\n    }\r\n  }\r\n\r\n  //UPDATER\r\n  async _testString() {\r\n    const text = await this._token.testString();\r\n    this.setState({test: text});\r\n  }\r\n\r\n  //Token.sol test func caller\r\n  async _test(input) {\r\n    try {\r\n      await this._token.test(input);\r\n    } catch (error) {\r\n      console.log(\"Test Func Error\")\r\n    }\r\n  }\r\n\r\n  async _updateProductID() {\r\n    const ID = await this._token.getProductNumber();\r\n    this.setState({productID: ID});\r\n  }\r\n\r\n  async _createProduct() {\r\n    try {\r\n      await this._token.createProduct();\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  async _updateOwner() {\r\n    const newOwner = await this._token.getOwner();\r\n    this.setState({owner: newOwner});\r\n  }\r\n\r\n  async _sellProduct(input) {\r\n    try {\r\n      await this._token.sellProduct(input);\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  async _updateWarrantyStartTime() {\r\n    const startTime = await this._token.getWarrantyStartTime();\r\n    this.setState({warrantyStartTime: startTime});\r\n  }\r\n\r\n  async _startWarranty() {\r\n    try {\r\n      await this._token.setWarrantyStartTime();\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  async _updateTotalWarrantyTime() {\r\n    const totalTime = await this._token.getWarrantyTimePeriod();\r\n    this.setState({totalWarrantyTime: totalTime});\r\n  }\r\n\r\n  async _extendWarranty(input) {\r\n    try {\r\n      await this._token.enlargeWarranty(input);\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  async _checkWarranty() {\r\n    try {\r\n      const state = await this._token.checkWarrantyApplicable();\r\n      this.setState({warrantyState: state});\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  // This method just clears part of the state.\r\n  _dismissTransactionError() {\r\n    this.setState({ transactionError: undefined });\r\n  }\r\n\r\n  // This method just clears part of the state.\r\n  _dismissNetworkError() {\r\n    this.setState({ networkError: undefined });\r\n  }\r\n\r\n  // This is an utility method that turns an RPC error into a human readable\r\n  // message.\r\n  _getRpcErrorMessage(error) {\r\n    if (error.data) {\r\n      return error.data.message;\r\n    }\r\n\r\n    return error.message;\r\n  }\r\n\r\n  // This method resets the state\r\n  _resetState() {\r\n    this.setState(this.initialState);\r\n  }\r\n\r\n  // This method checks if Metamask selected network is Localhost:8545 \r\n  _checkNetwork() {\r\n    if (window.ethereum.networkVersion === HARDHAT_NETWORK_ID) {\r\n      return true;\r\n    }\r\n\r\n    this.setState({ \r\n      networkError: 'Please connect Metamask to Localhost:8545'\r\n    });\r\n\r\n    return false;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}